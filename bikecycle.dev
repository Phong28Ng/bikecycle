#include <GL/glut.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define PI 3.141592653589793
#define MAX_SPEED 1.0f
#define DECELERATION 0.01f
#define MAX_CHARGE 1.0f
#define PARTICLE_COUNT 100
#define TERRAIN_SCALE 50.0f

// Global variables
float angleX = 0.0f, angleY = 0.0f;
float xpos = 0.0f, ypos = 0.5f, zpos = 0.0f;
float speed = 0.0f, direction = 0.0f;
float camx = 0.0f, camy = 2.0f, camz = 5.0f;
float charge = 0.0f; // Booster charge level
int isCharging = 0; // Spacebar held
int isNight = 0; // Night mode
int isRain = 0; // Weather mode
int isCockpitView = 0; // Cockpit view

// Particle system for boosters, afterburner, explosion, and rain
typedef struct {
    float x, y, z;
    float vx, vy, vz;
    float life;
} Particle;
Particle boosters[PARTICLE_COUNT];
Particle afterburner[PARTICLE_COUNT];
Particle explosion[PARTICLE_COUNT];
Particle rain[PARTICLE_COUNT];

// Terrain height function
float terrainHeight(float x, float z) {
    return 0.5f + 0.5f * sin(x / 10.0f) * cos(z / 10.0f); // Simple hilly terrain
}

// Initialize particles
void initParticles(Particle* particles, int count, float x, float y, float z, int isExplosion) {
    for (int i = 0; i < count; i++) {
        particles[i].x = x;
        particles[i].y = y;
        particles[i].z = z;
        if (isExplosion) {
            particles[i].vx = ((float)rand() / RAND_MAX - 0.5f) * 0.5f;
            particles[i].vy = ((float)rand() / RAND_MAX - 0.5f) * 0.5f;
            particles[i].vz = ((float)rand() / RAND_MAX - 0.5f) * 0.5f;
        } else {
            particles[i].vx = ((float)rand() / RAND_MAX - 0.5f) * 0.05f;
            particles[i].vy = -0.1f - (float)rand() / RAND_MAX * 0.1f;
            particles[i].vz = ((float)rand() / RAND_MAX - 0.5f) * 0.05f;
        }
        particles[i].life = 1.0f;
    }
}

// Update particles
void updateParticles(Particle* particles, int count, float dt, int isExplosion) {
    for (int i = 0; i < count; i++) {
        if (particles[i].life > 0.0f) {
            particles[i].x += particles[i].vx * dt;
            particles[i].y += particles[i].vy * dt;
            particles[i].z += particles[i].vz * dt;
            particles[i].life -= dt * (isExplosion ? 2.0f : 1.0f);
        }
    }
}

// Draw particles
void drawParticles(Particle* particles, int count, int isFire) {
    glPointSize(3.0f);
    glBegin(GL_POINTS);
    for (int i = 0; i < count; i++) {
        if (particles[i].life > 0.0f) {
            if (isFire) {
                glColor4f(1.0f, 0.5f, 0.0f, particles[i].life); // Orange for fire
            } else {
                glColor4f(0.5f, 0.5f, 0.5f, particles[i].life); // Gray for smoke/rain
            }
            glVertex3f(particles[i].x, particles[i].y, particles[i].z);
        }
    }
    glEnd();
}

// Draw airplane
void plane() {
    // Main body - Red
    glColor3d(1.0, 0.0, 0.0);
    glPushMatrix();
        glTranslated(0, 0, 0);
        glScaled(3, 0.4, 0.5);
        glutSolidSphere(1, 30, 30);
    glPopMatrix();

    // Cockpit - Black
    glColor3d(0, 0, 0);
    glPushMatrix();
        glTranslated(1.7, 0.1, 0);
        glScaled(1.5, 0.7, 0.8);
        glRotated(40, 0, 1, 0);
        glutSolidSphere(0.45, 30, 30);
    glPopMatrix();

    // Front Wings - Green
    glColor3d(0.0, 0.8, 0.0);
    glPushMatrix();
        glTranslated(0, 0, 1.2);
        glRotated(-50, 0, 1, 0);
        glScaled(0.7, 0.1, 3);
        glRotated(25, 0, 1, 0);
        glutSolidCube(1);
    glPopMatrix();

    glPushMatrix();
        glTranslated(-0.3, -0.15, 1.5);
        glRotated(90, 0, 1, 0);
        glScaled(0.1, 0.1, 0.9);
        glutSolidTorus(0.5, 0.5, 50, 50);
    glPopMatrix();

    glPushMatrix();
        glTranslated(0.2, -0.15, 0.9);
        glRotated(90, 0, 1, 0);
        glScaled(0.1, 0.1, 0.9);
        glutSolidTorus(0.5, 0.5, 50, 50);
    glPopMatrix();

    glPushMatrix();
        glTranslated(0, 0, -1.2);
        glRotated(50, 0, 1, 0);
        glScaled(0.7, 0.1, 3);
        glRotated(-25, 0, 1, 0);
        glutSolidCube(1);
    glPopMatrix();

    glPushMatrix();
        glTranslated(-0.3, -0.15, -1.5);
        glRotated(90, 0, 1, 0);
        glScaled(0.1, 0.1, 0.9);
        glutSolidTorus(0.5, 0.5, 50, 50);
    glPopMatrix();

    glPushMatrix();
        glTranslated(0.2, -0.15, -0.9);
        glRotated(90, 0, 1, 0);
        glScaled(0.1, 0.1, 0.9);
        glutSolidTorus(0.5, 0.5, 50, 50);
    glPopMatrix();

    // Tail Wings - Green
    glPushMatrix();
        glTranslated(-2.8, 0, 0);
        glScaled(0.8, 0.5, 0.3);
        glColor3d(0.0, 0.8, 0.0);
        glPushMatrix();
            glTranslated(0.4, 0, 1.5);
            glRotated(-30, 0, 1, 0);
            glScaled(0.7, 0.1, 3);
            glRotated(10, 0, 1, 0);
            glutSolidCube(1);
        glPopMatrix();
        glPushMatrix();
            glTranslated(0.4, 0, -1.5);
            glRotated(30, 0, 1, 0);
            glScaled(0.7, 0.1, 3);
            glRotated(-10, 0, 1, 0);
            glutSolidCube(1);
        glPopMatrix();
    glPopMatrix();

    // Vertical Tail Wing - Green
    glColor3d(0.0, 0.8, 0.0);
    glPushMatrix();
        glTranslated(-2.7, 0.5, 0);
        glRotated(45, 0, 0, 1);
        glScaled(0.8, 2, 0.1);
        glRotated(-20, 0, 0, 1);
        glutSolidCube(0.5);
    glPopMatrix();
}

// Draw launch platform
void drawPlatform() {
    glColor3f(0.5f, 0.5f, 0.5f);
    if (isNight) glColor3f(0.7f, 0.7f, 0.7f); // Brighter in night mode
    glPushMatrix();
        glTranslated(0.0f, -0.25f, 0.0f);
        glScaled(10.0f, 0.5f, 5.0f);
        glutSolidCube(1.0f);
    glPopMatrix();
}

// Draw terrain
void drawTerrain() {
    glColor3f(0.3f, 0.2f, 0.1f); // Brown terrain
    if (isNight) glColor3f(0.2f, 0.15f, 0.05f);
    glBegin(GL_QUADS);
    for (float x = -TERRAIN_SCALE; x < TERRAIN_SCALE; x += 1.0f) {
        for (float z = -TERRAIN_SCALE; z < TERRAIN_SCALE; z += 1.0f) {
            float h1 = terrainHeight(x, z);
            float h2 = terrainHeight(x + 1.0f, z);
            float h3 = terrainHeight(x + 1.0f, z + 1.0f);
            float h4 = terrainHeight(x, z + 1.0f);
            glVertex3f(x, h1, z);
            glVertex3f(x + 1.0f, h2, z);
            glVertex3f(x + 1.0f, h3, z + 1.0f);
            glVertex3f(x, h4, z + 1.0f);
        }
    }
    glEnd();
}

// Draw ground grid
void landmarks() {
    GLfloat i;
    glColor3f(0.0f, 1.0f, 0.0f);
    if (isNight) glColor3f(0.0f, 0.7f, 0.0f);
    glBegin(GL_LINES);
    for (i = -100.0f; i <= 100.0f; i += 1.0f) {
        glVertex3f(-100.0f, -0.5f, i);
        glVertex3f(100.0f, -0.5f, i);
        glVertex3f(i, -0.5f, -100.0f);
        glVertex3f(i, -0.5f, 100.0f);
    }
    glEnd();
}

// Absolute value
GLfloat Abs(GLfloat a) {
    return (a < 0.0f) ? -a : a;
}

// Degrees to radians
GLfloat radians(GLfloat a) {
    return a * PI / 180.0f;
}

// Update scene
void updateScene() {
    GLfloat xDelta, zDelta, yDelta;

    // Update booster particles if charging
    if (isCharging) {
        initParticles(boosters, PARTICLE_COUNT, xpos - 3.0f, ypos - 0.2f, zpos, 0);
    }
    updateParticles(boosters, PARTICLE_COUNT, 0.016f, 0);

    // Update afterburner particles if moving
    if (speed > 0.0f) {
        initParticles(afterburner, PARTICLE_COUNT, xpos - 3.0f, ypos, zpos, 0);
    }
    updateParticles(afterburner, PARTICLE_COUNT, 0.016f, 0);

    // Update explosion particles
    updateParticles(explosion, PARTICLE_COUNT, 0.016f, 1);

    // Update rain particles
    if (isRain) {
        for (int i = 0; i < PARTICLE_COUNT; i++) {
            if (rain[i].life <= 0.0f) {
                rain[i].x = xpos + ((float)rand() / RAND_MAX - 0.5f) * 20.0f;
                rain[i].y = ypos + 10.0f;
                rain[i].z = zpos + ((float)rand() / RAND_MAX - 0.5f) * 20.0f;
                rain[i].vx = 0.0f;
                rain[i].vy = -0.5f;
                rain[i].vz = 0.0f;
                rain[i].life = 1.0f;
            }
        }
        updateParticles(rain, PARTICLE_COUNT, 0.016f, 0);
    }

    // Decrease speed
    if (Abs(speed) > 0.0f) {
        speed -= DECELERATION;
        if (speed < 0.0f) speed = 0.0f;
    }

    // Update position
    if (speed > 0.0f) {
        xDelta = speed * cos(radians(direction));
        zDelta = speed * sin(radians(direction));
        yDelta = speed * sin(radians(angleX));
        xpos += xDelta;
        zpos -= zDelta;
        ypos += yDelta;

        // Collision detection with terrain
        float terrainH = terrainHeight(xpos, zpos);
        if (ypos < terrainH) {
            printf("Collision! Exploding and resetting.\n");
            initParticles(explosion, PARTICLE_COUNT, xpos, ypos, zpos, 1);
            xpos = 0.0f;
            ypos = 0.5f;
            zpos = 0.0f;
            speed = 0.0f;
            angleX = 0.0f;
            direction = 0.0f;
        }
    }
}

// Draw HUD for cockpit view
void drawHUD() {
    glMatrixMode(GL_PROJECTION);
    glPushMatrix();
    glLoadIdentity();
    gluOrtho2D(0, 800, 0, 600);
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glLoadIdentity();

    glColor3f(0.0f, 1.0f, 0.0f);
    glRasterPos2f(10, 580);
    char hud[50];
    snprintf(hud, 50, "Speed: %.2f Altitude: %.2f", speed, ypos);
    for (char* c = hud; *c != '\0'; c++) {
        glutBitmapCharacter(GLUT_BITMAP_HELVETICA_12, *c);
    }

    glPopMatrix();
    glMatrixMode(GL_PROJECTION);
    glPopMatrix();
    glMatrixMode(GL_MODELVIEW);
}

// Display function
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();

    // Camera setup
    if (isCockpitView) {
        camx = xpos + 1.7f * cos(radians(direction));
        camy = ypos + 0.1f;
        camz = zpos - 1.7f * sin(radians(direction));
        gluLookAt(camx, camy, camz,
                  camx + cos(radians(direction)), camy + sin(radians(angleX)), camz - sin(radians(direction)),
                  0.0, 1.0, 0.0);
    } else {
        camx = xpos - 5.0f * cos(radians(direction));
        camz = zpos + 5.0f * sin(radians(direction));
        camy = 2.0f + ypos;
        gluLookAt(camx, camy, camz, xpos, ypos, zpos, 0.0, 1.0, 0.0);
    }

    // Night mode lighting and fog
    if (isNight) {
        glClearColor(0.0f, 0.0f, 0.1f, 1.0f);
        GLfloat light_pos[] = {xpos, ypos - 0.5f, zpos, 1.0f};
        glLightfv(GL_LIGHT0, GL_POSITION, light_pos);
        glEnable(GL_FOG);
        GLfloat fogColor[] = {0.0f, 0.0f, 0.1f, 1.0f};
        glFogfv(GL_FOG_COLOR, fogColor);
        glFogf(GL_FOG_DENSITY, 0.02f);
    } else {
        glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
        GLfloat light_pos[] = {1.0f, 1.0f, 1.0f, 0.0f};
        glLightfv(GL_LIGHT0, GL_POSITION, light_pos);
        if (isRain) {
            glEnable(GL_FOG);
            GLfloat fogColor[] = {0.5f, 0.5f, 0.5f, 1.0f};
            glFogfv(GL_FOG_COLOR, fogColor);
            glFogf(GL_FOG_DENSITY, 0.05f);
        } else {
            glDisable(GL_FOG);
        }
    }

    // Check for OpenGL errors
    GLenum err = glGetError();
    if (err != GL_NO_ERROR) {
        printf("OpenGL Error in display: %d\n", err);
    }

    // Draw scene
    landmarks();
    drawTerrain();
    drawPlatform();
    drawParticles(boosters, PARTICLE_COUNT, 1);
    drawParticles(afterburner, PARTICLE_COUNT, 0);
    drawParticles(explosion, PARTICLE_COUNT, 1);
    if (isRain) drawParticles(rain, PARTICLE_COUNT, 0);

    // Draw plane with vibration effect
    glPushMatrix();
        float vibe = speed * 0.05f * sin(glutGet(GLUT_ELAPSED_TIME) * 0.01f);
        glTranslatef(xpos + vibe, ypos, zpos);
        glRotatef(direction, 0.0f, 1.0f, 0.0f);
        glRotatef(angleX, 1.0f, 0.0f, 0.0f);
        glRotatef(angleY, 0.0f, 1.0f, 0.0f);
        plane();
    glPopMatrix();

    // Draw HUD in cockpit view
    if (isCockpitView) drawHUD();

    glutSwapBuffers();
}

// Keyboard handler
void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 27: // Esc to exit
            exit(0);
            break;
        case ' ': // Spacebar to charge boosters
            if (speed == 0.0f) {
                isCharging = 1;
                charge += 0.01f;
                if (charge > MAX_CHARGE) charge = MAX_CHARGE;
                printf("Charging: %.2f\n", charge);
            }
            break;
        case 'w': // Toggle weather
            isRain = !isRain;
            if (isRain) initParticles(rain, PARTICLE_COUNT, xpos, ypos + 10.0f, zpos, 0);
            printf("Weather: %s\n", isRain ? "Rain" : "Clear");
            break;
        case 'n': // Toggle night mode
            isNight = !isNight;
            printf("Mode: %s\n", isNight ? "Night" : "Day");
            break;
        case 'c': // Toggle cockpit view
            isCockpitView = !isCockpitView;
            printf("View: %s\n", isCockpitView ? "Cockpit" : "Third-person");
            break;
    }
    glutPostRedisplay();
}

// Key release handler
void keyboardUp(unsigned char key, int x, int y) {
    if (key == ' ' && isCharging) {
        isCharging = 0;
        speed = charge * MAX_SPEED;
        angleX = charge * 30.0f; // Pitch up based on charge
        charge = 0.0f;
        printf("Launched with speed=%.2f, angleX=%.2f\n", speed, angleX);
    }
    glutPostRedisplay();
}

// Idle function
void idle() {
    updateScene();
    glutPostRedisplay();
}

// Reshape function
void reshape(int width, int height) {
    glViewport(0, 0, (GLsizei)width, (GLsizei)height);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, (GLfloat)width / (GLfloat)height, 0.1, 200.0);
    glMatrixMode(GL_MODELVIEW);
}

// Initialize OpenGL
void initOpenGL() {
    GLfloat mat_specular[] = {1.0f, 1.0f, 1.0f, 1.0f};
    GLfloat mat_shininess[] = {100.0f};
    GLfloat light_directional[] = {1.0f, 1.0f, 1.0f, 0.0f};
    GLfloat light_diffuse[] = {1.0f, 1.0f, 1.0f, 1.0f};

    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glShadeModel(GL_SMOOTH);
    glLightfv(GL_LIGHT0, GL_POSITION, light_directional);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glColorMaterial(GL_FRONT, GL_DIFFUSE);

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_NORMALIZE);
    glEnable(GL_CULL_FACE);

    // Initialize fog parameters
    glFogi(GL_FOG_MODE, GL_EXP2);
    glFogf(GL_FOG_DENSITY, 0.02f); // Default density, adjusted in display()
    GLfloat fogColor[] = {0.0f, 0.0f, 0.0f, 1.0f}; // Default fog color
    glFogfv(GL_FOG_COLOR, fogColor);
    glDisable(GL_FOG); // Fog off by default

    // Check for OpenGL errors
    GLenum err = glGetError();
    if (err != GL_NO_ERROR) {
        printf("OpenGL Error in initOpenGL: %d\n", err);
    }

    // Initialize particles
    initParticles(boosters, PARTICLE_COUNT, 0.0f, 0.0f, 0.0f, 0);
    initParticles(afterburner, PARTICLE_COUNT, 0.0f, 0.0f, 0.0f, 0);
    initParticles(explosion, PARTICLE_COUNT, 0.0f, 0.0f, 0.0f, 1);
    initParticles(rain, PARTICLE_COUNT, 0.0f, 10.0f, 0.0f, 0);
}

// Main function
int main(int argc, char* argv[]) {
    // Seed random number generator
    srand((unsigned int)time(NULL));
    if (time(NULL) == -1) {
        printf("Error: Failed to get time for random seed.\n");
        return 1;
    }

    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Advanced Plane Simulation (Fixed Fog and srand)");

    // Initialize OpenGL settings
    initOpenGL();

    // Register callback functions
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glutKeyboardUpFunc(keyboardUp);
    glutIdleFunc(idle);

    // Start the main loop
    glutMainLoop();
    return 0;
}
